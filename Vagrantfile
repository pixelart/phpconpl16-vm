##################################################
# Generated by phansible.com, adapated by pkarisch
##################################################
dir = File.dirname(File.expand_path(__FILE__))

require 'yaml'

configValues = YAML.load_file("#{dir}/provisioning/group_vars/vagrant/server.yml")
data = configValues['vagrant_local']

# If your Vagrant version is lower than 1.6, you can still use this provisioning
# by commenting or removing the line below and providing the config.vm.box_url parameter,
# if it's not already defined in this Vagrantfile. Keep in mind that you won't be able
# to use the Vagrant Cloud and other newer Vagrant features.
Vagrant.require_version '>= 1.8.5'

vagrant_home = (ENV['VAGRANT_HOME'].to_s.split.join.length > 0) ?
    ENV['VAGRANT_HOME'] :
    "#{ENV['HOME']}/.vagrant.d"
vagrant_dot  = (ENV['VAGRANT_DOTFILE_PATH'].to_s.split.join.length > 0) ?
    ENV['VAGRANT_DOTFILE_PATH'] :
    "#{dir}/.vagrant"

# Check to determine whether we're on a windows or linux/os-x host,
# later on we use this to launch ansible in the supported way
# source: https://stackoverflow.com/questions/2108727/which-in-ruby-checking-if-program-exists-in-path-from-ruby
def which(cmd)
    exts = ENV['PATHEXT'] ? ENV['PATHEXT'].split(';') : ['']
    ENV['PATH'].split(File::PATH_SEPARATOR).each do |path|
        exts.each { |ext|
            exe = File.join(path, "#{cmd}#{ext}")
            return exe if File.executable? exe
        }
    end
    return nil
end

Vagrant.configure("2") do |config|
    config.vm.box = "#{data['vm']['base_box']}"
    config.vm.hostname = "#{data['vm']['hostname']}"

    config.vm.network :private_network, ip: "#{data['vm']['ip']}"

    config.vm.provider :virtualbox do |v|
        v.customize [
            "modifyvm", :id,
            "--name", "#{data['vm']['hostname']}",
            "--memory", "#{data['vm']['memory']}",
            "--natdnshostresolver1", "on",
            "--cpus", "#{data['vm']['cpus']}",
        ]

        v.customize ["setextradata", :id, "VBoxInternal2/SharedFoldersEnableSymlinksCreate/vagrant", "1"]
    end

    # https://github.com/smdahlen/vagrant-hostmanager
    if Vagrant.has_plugin?('vagrant-hostmanager')
        config.hostmanager.enabled           = true
        config.hostmanager.manage_host       = true
        config.hostmanager.ignore_private_ip = false
        config.hostmanager.include_offline   = false
    end

    # https://github.com/fgrehm/vagrant-cachier
    if Vagrant.has_plugin?('vagrant-cachier')
        config.cache.scope = :box
        config.cache.auto_detect = false
    end

    # https://github.com/dotless-de/vagrant-vbguest
    if Vagrant.has_plugin?('vagrant-vbguest')
        config.vbguest.no_install = true
    end

    if Vagrant.has_plugin?('vagrant-bindfs')
        config.vm.synced_folder ".", "/mnt/vagrant", id: "vagrant", type: 'nfs'
        config.bindfs.bind_folder "/mnt/vagrant", "/vagrant", owner: "vagrant", group: "vagrant", perms: "u=rwX:g=rwX:o=rD", 'create-as-user': true, 'create-with-perms': "u=rwX:g=rwX:o=rD", 'chown-ignore': true, 'chgrp-ignore': true, 'chmod-ignore': true
    else
        config.vm.synced_folder ".", "/vagrant", id: "vagrant", type: 'nfs'
    end

    ssh_username = 'vagrant'

    config.vm.provision :shell,
        :inline => "sed -i -e 's/\r$//' /vagrant/provisioning/shell/*.sh"
    config.vm.provision 'shell' do |s|
        s.path = 'provisioning/shell/initial-setup.sh'
        s.args = '/vagrant/provisioning'
    end
    config.vm.provision 'shell' do |s|
        s.path = 'provisioning/shell/ssh-keygen.sh'
        s.args = "#{ssh_username}"
    end

    # If ansible is in your path it will provision from your HOST machine
    # If ansible is not found in the path it will be instaled in the VM and provisioned from there
    if which('ansible-playbook')
        config.vm.provision "ansible" do |ansible|
            ansible.playbook = "provisioning/playbook.yml"
            ansible.inventory_path = "provisioning/inventories/vagrant"
            ansible.limit = 'all'
#             ansible.raw_arguments  = [
#                 "--tags=",
#             ]
        end
    else
        config.vm.provision "ansible_local" do |ansible|
            ansible.playbook = "provisioning/playbook.yml"
            ansible.inventory_path = "provisioning/inventories/vagrant"
            ansible.limit = 'all'
            ansible.raw_arguments  = [
                "--connection=local",
            ]
        end
    end

    config.vm.provision :shell, :path => 'provisioning/shell/important-notices.sh'

    customKey  = "#{dir}/provisioning/files/dot/ssh/id_rsa"
    vagrantKey = "#{vagrant_dot}/machines/default/virtualbox/private_key"

    if File.file?(customKey)
        config.ssh.private_key_path = [
            customKey,
            "#{vagrant_home}/insecure_private_key"
      ]

      if File.file?(vagrantKey) and ! FileUtils.compare_file(customKey, vagrantKey)
          File.delete(vagrantKey)
      end

      if ! File.directory?(File.dirname(vagrantKey))
          FileUtils.mkdir_p(File.dirname(vagrantKey))
      end

      if ! File.file?(vagrantKey)
          FileUtils.cp(customKey, vagrantKey)
      end
    end

    config.ssh.username = "#{ssh_username}"
    config.ssh.insert_key = false
    config.ssh.keep_alive = true
    config.ssh.forward_agent = true
end
